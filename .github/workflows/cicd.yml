name: CICD

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_NAME: auction-seats
  BUCKET_NAME: tago-deploy1
  CODE_DEPLOY_APP_NAME: tago-dev
  DEPLOYMENT_GROUP_NAME: tago-deploy-group

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" | base64 --decode > ./application-prod.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        env:
          SPRING_PROFILES_ACTIVE: prod
        run: ./gradlew clean build -x test --stacktrace
        shell: bash

      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build docker file and setting deploy files
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: auction-seats
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          mkdir scripts
          touch scripts/deploy.sh
          echo -e '#!/bin/bash\n' > scripts/deploy.sh
          echo "echo '> 현재 실행 중인 Docker 컨테이너 pid 확인' >> /home/ubuntu/deploy.log" >> scripts/deploy.sh
          echo "CONTAINER_ID=\$(sudo docker container ls -af 'name=auction-seats-api' -q)" >> scripts/deploy.sh
          echo "if [ -z \"\$CONTAINER_ID\" ]; then" >> scripts/deploy.sh
          echo "  echo '> 현재 구동중인 Docker 컨테이너가 없으므로 종료하지 않습니다.' >> /home/ubuntu/deploy.log" >> scripts/deploy.sh
          echo "else" >> scripts/deploy.sh
          echo "  echo '> sudo docker stop \$CONTAINER_ID'   # 현재 구동중인 Docker 컨테이너가 있다면 모두 중지" >> scripts/deploy.sh
          echo "  sudo docker stop -f \$CONTAINER_ID" >> scripts/deploy.sh
          echo "  echo '> sudo docker rm \$CONTAINER_ID'   # 정지한 컨테이너 삭제" >> scripts/deploy.sh
          echo "  sudo docker rm -f \$CONTAINER_ID" >> scripts/deploy.sh
          echo "  sleep 5" >> scripts/deploy.sh
          echo "fi" >> scripts/deploy.sh
          echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin \$ECR_REGISTRY" >> scripts/deploy.sh
          echo "docker pull \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG" >> scripts/deploy.sh
          echo "if sudo lsof -i :6379; then" >> scripts/deploy.sh
          echo "  echo '포트 6379가 사용 중입니다. 다른 포트를 사용합니다.' >> /home/ubuntu/deploy.log" >> scripts/deploy.sh
          echo "  docker run -p 8080:8080 -p 6380:6379 -p 3306:3306 -v /home/ubuntu/auction-seats/logs:/logs -v /etc/localtime:/etc/localtime:ro -e TZ=Asia/Seoul -d --restart always --name auction-seats-api \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG" >> scripts/deploy.sh
          echo "else" >> scripts/deploy.sh
          echo "  docker run -p 8080:8080 -p 6379:6379 -p 3306:3306 -v /home/ubuntu/auction-seats/logs:/logs -v /etc/localtime:/etc/localtime:ro -e TZ=Asia/Seoul -d --restart always --name auction-seats-api \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG" >> scripts/deploy.sh
          echo "fi" >> scripts/deploy.sh

      - name: upload to s3
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          zip -r $IMAGE_TAG.zip ./scripts appspec.yml
          aws s3 cp --region ap-northeast-2 --acl private ./$IMAGE_TAG.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: start deploy
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-group-name $DEPLOYMENT_GROUP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$IMAGE_TAG.zip